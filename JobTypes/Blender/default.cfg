; Make sure that the filename of this file doesn't have a number directly before the extension dot! Otherwise it will fail!

[JobType]
;"main" should be the same as the directory name this file is located in
;"version" has to be the same as the filename without extension
 
main="Blender"
version="default"


[FileExtensions]
; These extensions will be used by the file dialog if you want to create a new job.
; You can add several extensions here. The description of an extension should be named the same with the suffix "_description"

extension_1=".blend"
extension_1_description="Blender Files"


[SpecificJobSettings]
; Each specific job setting needs two additional keys. (Tooltip is optional)
; - One to define the type of the setting. Use the same name plus "_type" as suffix.
;   Allowed types are: "String", "int", "float" and "bool"
; - One to define the default value of the setting. Use the same name plus "_default" as suffix.
; - For a tooltip use the same name plus "_tooltip" as suffix.


[JobTypeSettings]
path_executable="blender"
commandline="$(path_executable) -b $(path_scene) -t $(CPUs) -s $(start) -e $(end) -a"


[RenderLogValidation]
; software_start_success:
; This is mandatory to set up. It's supposed to be a log output that indicates that the software has started successfully.
; If RaptorRender does not detect this string, it will cancel the chunk after "software_start_success_timeout" seconds.

; critical_error:  
; An error where rendering can't continue. If the process hasn't already exited due to the error itself,
; RaptorRender cancels the process execution. 

; critical_error_exclude:   
; Sometimes it might be necessary to exclude some false positives, so RaptorRender doesn't stop the execution. 
; E.g. the "Not freed memory blocks" error in Blender which can (depending on build) occur when blender exits after finishing the render. ; In this case the error doesn't matter, as the render has already finished.

; error:   
; Some software may print various error messages, that are not critical for render execution, but might help for debuging. 
; RaptorRender will highlight those in orange, but they won't stop the render itself.

; warning:   
; Log message that is ment as a warning. RaptorRender will highlight them in yellow.

; frame_success:   
; Log message that indicates, that one frame/part of the chunk has been finished.

; success:  
; Log message that indicates, that the whole chunk has been successfully finished


; possible values for pattern types
; 0 - not set. Validation will be skipped
; 1 - Log line starts with the corresponding string
; 2 - log line ends with the corresponding string
; 3 - log line contains the corresponding string
; 4 - log line matches exactly the corresponding string
; 5 - the corresponding string is a regular expression that searches for matches in the log line

; Use double semicolons in strings to declare several possible strings. Only for none regex types.
; If you want to use a double quote inside the string value use two consecutive single quotes instead. " -> ''  
; E.g: "Path: ''some/path/''"

software_start_success="Read prefs:"
software_start_success_pattern_type=1
software_start_success_timeout=10

critical_error_log="Error:"
critical_error_log_pattern_type=1

critical_error_exclude_log="Not freed memory blocks"
critical_error_exclude_log_pattern_type=3

error_log="AttributeError;;KeyError;;TypeError;;FileNotFoundError;;Error: Not freed memory blocks"
error_log_pattern_type=1

warning_log="Warning:"
warning_log_pattern_type=1

frame_success_log="Saved:"
frame_success_log_pattern_type=1

success_log=
success_log_pattern_type=0


; Regular Expression examples
; A good website to test and construct Regular Expressions: https://regexr.com/
; Note: you first have to correctly escape the regex from regexr.com, so that RaptorRender can read it correctly.
; If you want to use a double quote use two consecutive single quotes instead. " -> ''
;
; Examples:
;
; regexr.com Regex      |  correctly escaped        |  meaning
;
; ([A-Z])\w+            |  "([A-Z])\\w+"            |  Select all words that start with a capital letter 
; \d{2,4}               |  "\\d{2,4}"               |  Select at least 2, at most 4 consecutive digits per selection
; KeyError|TypeError    |  "KeyError|TypeError"     |  Select either "KeyError" or "TypeError"
;  \'[^\']{5,}?\'       |  " \\'[^\\']{10,}?\\'"    |  Select all strings that are enquoted in ' ' and are longer or equal to 10 chars
;  \"[^\"]{5,}?\"       |  " \\''[^\\'']{10,}?\\''" |  Select all strings that are enquoted in " " and are longer or equal to 10 chars