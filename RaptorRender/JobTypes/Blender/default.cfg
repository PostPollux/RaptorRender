; Make sure that the filename of this file doesn't have a number directly before the extension dot! Otherwise it will fail!

[JobType]
;"main" should be the same as the directory name this file is located in
;"version" has to be the same as the filename without extension
 
main="Blender"
version="default"


[FileExtensions]
; These extensions will be used by the file dialog if you want to create a new job.
; You can add several extensions here. The description of an extension should be named the same with the suffix "_description"

extension_1=".blend"
extension_1_description="Blender Files"


[SpecificJobSettings]
; Each specific job setting is represented by 6 keys that start with the same name.
; The setting can be referenced in the "commandline" under "JobTypeSettings" by enclosing the name with $(). E.g. $(writer_name)
; So there is the base one, that's just the name with an empty string applied to it and there are additional ones with suffixes.
; These additional keys with a double underscore suffix are important to define the behaviour and apperance of that setting.
;
; just the name of the setting:
; This is the name how it is going to be referenced in the commandline later on. There must not be any double underscores in that name.
; The value here in the file is ALWAYS "". Later when the job gets created the value will be either true or false. 
; "true" means that the placeholder ( $(name) ) in the commandline will be replaced by prefix + value (defined in "__cmd_value").
; For example: $(writer_name) could be replaced by "-w Write1" where "-w" is the prefix and "Write1" the value.
; Whereas false will replace the placeholder with the substitue string (defined in "__cmd_value") which is an empty string in most cases.
;
; __display_text:
; display_text is the name of the setting that is displayed when creating a new job in RaptorRenders interface.

; __tooltip:
; This is the tooltip that will be shown if the user is hovering over that setting while creating a job in RaptorRenders interface.

; __type:
; This is important so that the interface can correctly display that setting as a checkbox or a textfield or a spinbox...
; It has to be a string with two parts separated by ";;". The first part is the type, the second is the default value. 
; E.g. "string;;Write1" or "bool;;false"
; Allowed types are: "string", "int", "float" and "bool"

; __activatable:
; This defines if the setting will have a checkbox in front of it. That enables you to decide in the interface to either use it or not.
; So a setting can look something like this: [x] _____
; It has to be a string with two parts separated by ";;". Both are supposed to be bools. 
; The first part defines if there will be a checkbox at all. The second one defines the default state of that checkbox.
; When creating a job through RaptorRenders interface the state of that checkbox will be applied to the key that represents just the name of your setting. See the explanation of "just the name of the setting" from above to understand what that means.

; __cmd_value:
; Has to be a string with three parts separated by ";;". 
; First part is the "prefix", second one the "value" and the third one is the "substitute".
; If the value of just the name of the setting is true later in the validation, it will replace the placeholder in the command line with "prefix" + "value". If it is false it will raplace the placeholder with the "substitute" string, which is "" in most cases.
; To understand these three parts we look at an example usage in Nuke:
; If we want to normally render over the command line we have to add "-x" to it, so that it knows to just render all writer nodes.
; But if we only want to render a specific writer, we have to change "-x" to "-X writername". That's why we need a setting like "specific_writer". The commandline with placeholders would look something like that: 
; "$(path_executable) -F $(start)-$(end) $(specific_writer) $(path_scene)"
; We then set the value of our "specific_writer__cmd_value" to "-X;;input;;-x" where the second string of the "value" (here: "input") is arbitrary. It could also be "-X;;;;-x" or "-X;;value;;-x". That's because "value" will be filled by the value you enter in RaptorRenders interface or in case you use a submitter plugin it will be handled by this plugin.
; If the whole setting will be true at the end and the Value inputted for "specific_writer" was "Write4", it will resolve to:
; "$(path_executable) -F $(start)-$(end) -X Write4 $(path_scene)"
; If the whole setting will be will be false it will resolve to:
; "$(path_executable) -F $(start)-$(end) -x $(path_scene)"


[JobTypeSettings]
path_executable="blender"
commandline="$(path_executable) -b $(path_scene) -t $(CPUs) -s $(start) -e $(end) -a"


[RenderLogValidation]
; software_start_success:
; This is mandatory to set up. It's supposed to be a log output that indicates that the software has started successfully.
; If RaptorRender does not detect this string, it will cancel the chunk after "software_start_success_timeout" seconds.

; critical_error:  
; An error where rendering can't continue. If the process hasn't already exited due to the error itself,
; RaptorRender cancels the process execution. 

; critical_error_exclude:   
; Sometimes it might be necessary to exclude some false positives, so RaptorRender doesn't stop the execution. 
; E.g. the "Not freed memory blocks" error in Blender which can (depending on build) occur when blender exits after finishing the render. ; In this case the error doesn't matter, as the render has already finished.

; error:   
; Some software may print various error messages, that are not critical for render execution, but might help for debuging. 
; RaptorRender will highlight those in orange, but they won't stop the render itself.

; warning:   
; Log message that is ment as a warning. RaptorRender will highlight them in yellow.

; frame_success:   
; Log message that indicates, that one frame/part of the chunk has been finished.

; frame_name_detect_pattern:   
; This is a Regular Expression to find the filename of the finished frame. RaptorRender can only display preview images, if this works.
; It will only be triggered if "frame_success" has been detected first.
; In this case it searches in the exact same log line for the filename. Not every software prints the resulting filename in the log. 
; E.g: Blender prints the whole path to the file, while Natron only mentions the frame number without padding or file extension.
; To handle this there is also a "frame_name_detect_option". See below for explanation.

; success:  
; Log message that indicates, that the whole chunk has been successfully finished


; possible values for pattern types
; 0 - not set. Validation will be skipped
; 1 - Log line starts with the corresponding string
; 2 - log line ends with the corresponding string
; 3 - log line contains the corresponding string
; 4 - log line matches exactly the corresponding string
; 5 - the corresponding string is a regular expression that searches for matches in the log line

; Use double semicolons in strings to declare several possible strings. Only for none regex types.
; If you want to use a double quote inside the string value use two consecutive single quotes instead. " -> ''  
; E.g: "Path: ''some/path/''"

; possible values for frame_name_detect_option
; 0 - not set. Search will be skipped
; 1 - selection from the search pattern is a whole filename with path. E.g:  /home/test/render_0010.png
; 2 - selection is only the frame number without padding. E.g. 12 in the log line while the filename is: /home/test/render_012.png

software_start_success="Blender .+hash"
software_start_success_pattern_type=5
software_start_success_timeout=10

critical_error_log="Error:"
critical_error_log_pattern_type=1

critical_error_exclude_log="Not freed memory blocks"
critical_error_exclude_log_pattern_type=3

error_log="AttributeError;;KeyError;;TypeError;;FileNotFoundError;;Error: Not freed memory blocks"
error_log_pattern_type=1

warning_log="Warning:"
warning_log_pattern_type=1

frame_success_log="Saved:"
frame_success_log_pattern_type=1

frame_name_detect_pattern="(?<=').+(?=')"
frame_name_detect_option=1

success_log=
success_log_pattern_type=0


; Regular Expression examples
; A good website to test and construct Regular Expressions: https://regexr.com/
; Note: you first have to correctly escape the regex from regexr.com, so that RaptorRender can read it correctly.
; If you want to use a double quote use two consecutive single quotes instead. " -> ''
;
; Examples:
;
; regexr.com Regex      |  correctly escaped        |  meaning
;
; ([A-Z])\w+            |  "([A-Z])\\w+"            |  Select all words that start with a capital letter 
; \d{2,4}               |  "\\d{2,4}"               |  Select at least 2, at most 4 consecutive digits per selection
; KeyError|TypeError    |  "KeyError|TypeError"     |  Select either "KeyError" or "TypeError"
;  \'[^\']{5,}?\'       |  " \\'[^\\']{10,}?\\'"    |  Select all strings that are enquoted in ' ' and are longer or equal to 10 chars
;  \"[^\"]{5,}?\"       |  " \\''[^\\'']{10,}?\\''" |  Select all strings that are enquoted in " " and are longer or equal to 10 chars